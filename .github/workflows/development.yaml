name: "Create Environment Test"
on:
  push:
    branches:
      - development


jobs:
  CI:
    runs-on: "ubuntu-latest"
    steps:
        - name: "Checkout"
          uses: "actions/checkout@v3"
          with:
            ref: development

        - name: Build Image docker
          id: build_docker
          uses: docker/login-action@v3
          with:
            username: ${{ secrets.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_PASSWORD }}

        - name: "Build and Push"
          uses: docker/build-push-action@v5
          with:
            context: backend/
            push: true
            tags: |
                marcotfm/zoologico:latest


  deploy:
    runs-on: ubuntu-latest
    needs: CI
    steps:
        - name: Checkout code from main branch
          uses: actions/checkout@v2   

        - name: Configure AWS Credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: us-east-1

        - name: Deploy VPC
          uses: aws-actions/aws-cloudformation-github-deploy@v1
          with:
            name: infraestructure-test
            template: ./infraestructure-test.yaml
            no-fail-on-empty-changeset: "1"
              
        - name: Execute SSH Commands
          env:
            PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          run: |
            for instance_id in $(aws cloudformation describe-stack-resources --stack-name SEU_STACK_NAME \
                        --query "StackResources[?ResourceType == 'AWS::EC2::Instance'].PhysicalResourceId" \
                        --output text); do
              instance_ip=$(aws ec2 describe-instances --instance-ids $instance_id \
                            --query "Reservations[0].Instances[0].PublicIpAddress" \
                            --output text)
              if ssh -o StrictHostKeyChecking=no -i $PRIVATE_KEY ubuntu@$instance_ip 'sudo docker ps -a --format {{.Names}} | grep -q container'; then
                ssh -o StrictHostKeyChecking=no -i $PRIVATE_KEY ubuntu@$instance_ip 'sudo docker rm -f container'
              fi
              ssh -o StrictHostKeyChecking=no -i $PRIVATE_KEY ubuntu@$instance_ip 'sudo docker pull marcotfm/zoologico:latest && sudo docker run -d -p 80:8000 --name container marcotfm/zoologico:latest'
            done
            