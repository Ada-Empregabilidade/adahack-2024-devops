name: Atualizar Ec2

on:

  workflow_run:
    workflows: ["formation.yaml"]
    types:
      - completed

jobs:
  CI:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: "main"

      - name: Build Image docker
        id: build_docker
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: "Build and Push"
        uses: docker/build-push-action@v5
        with:
          context: backend/
          push: true
          tags: |
              marcotfm/zoologico:v1
              marcotfm/zoologico:latest

  deploy:
    needs: CI
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code from main branch
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: List EC2 Instances
        id: list_ec2_instances
        env:
          PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          ec2_ips=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
          echo "$PRIVATE_KEY" > private.pem
          chmod 600 private.pem
          for ip in $ec2_ips; do
            if ssh -o StrictHostKeyChecking=no -i private.pem ubuntu@$ip 'sudo docker ps -a --format {{.Names}} | grep -q container'; then
              ssh -o StrictHostKeyChecking=no -i private.pem ubuntu@$ip 'sudo docker stop container && sudo docker rm container'
            fi
            ssh -o StrictHostKeyChecking=no -i private.pem ubuntu@$ip 'sudo docker pull marcotfm/zoologico:latest && sudo docker run -d -p 80:8000 --name container marcotfm/zoologico:latest'
          done
