Description: App deploy template v0.1

Resources:
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
       - Key: stack
         Value: dev

  ipv6CidrBlock:
    Type: AWS::EC2::VPCCidrBlock
    Properties:
      VpcId: !Ref myVPC
      AmazonProvidedIpv6CidrBlock: true

  publicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: us-east-1a
      MapPublicIpOnLaunch: true
      Tags:
       - Key: Name
         Value: Public Subnet 1
       - Key: stack
         Value: dev

  publicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: us-east-1c
      MapPublicIpOnLaunch: true
      Tags:
       - Key: Name
         Value: Public Subnet 2
       - Key: stack
         Value: dev

  myInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Internet Gateway
        - Key: stack
          Value: dev

  myInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref myVPC
      InternetGatewayId: !Ref myInternetGateway

  myPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: Public Route Table
        - Key: stack
          Value: dev

  myPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: myInternetGatewayAttachment
    Properties:
      RouteTableId: !Ref myPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref myInternetGateway

  publicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref publicSubnet1
      RouteTableId: !Ref myPublicRouteTable

  publicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref publicSubnet2
      RouteTableId: !Ref myPublicRouteTable

  Ec2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: ami-080e1f13689e07408
      InstanceType: t2.micro
      KeyName: hackatonAda
      SubnetId: !Ref publicSubnet1
      SecurityGroupIds:
        - !Ref Ec2SecurityGroup
      UserData: 
          Fn::Base64: |
            #!/bin/bash
            sudo apt update -y
            sudo apt install docker.io -y
            sudo usermod -aG docker $(whoami)
            sudo docker run -d -p 80:8000 --name container marcotfm/zoologico:latest
      Tags:
        - Key: stack
          Value: dev
    DependsOn: Ec2SecurityGroup
    

  Ec2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allows HTTP and SSH for EC2
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
